/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package main.java.TD2;

import main.java.TD2.Exercice1.Somme;
import main.java.TD2.Exercice1.ToString;
import main.java.TD2.Exercice2.Paire;

import main.java.TD2.universite.Matiere;
import main.java.TD2.universite.UE;
import main.java.TD2.universite.Annee;
import main.java.TD2.universite.Etudiant;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Predicate;

public class App {

    public void Exercie1_question1()
    {
        //Lambda pour 2 entiers
        Somme<Integer> somme1 = (x,y) -> x+y;

        //Lambda pour 2 doubles
        Somme<Double> somme2 = (x, y) -> x+y;

        //Lambda pour 2 longs
        Somme<Long> somme3 = (x, y) -> x+y;

        //Lambda pour 2 strings
        Somme<String> somme4 = (x,y) -> x+y;

        System.out.println(somme1.somme(1,2));
        System.out.println(somme2.somme(1.1,2.2));
        System.out.println(somme3.somme(1L,2L));
        System.out.println(somme4.somme("toto","titi"));
    }

    public void Exercice1_Question2(){
        //Lambda pour liste de String
        List<String> l = List.of("Toto", "Titi");
        ToString<List<String>> liste = l1 -> {
            //Je récupère chaque item de liste est j'ajoute une virgule
            StringBuffer str = new StringBuffer();
            for(String i: l1)
            {
                str.append(i);
                str.append(",");
            }
            return str.toString();
        };
        System.out.println(liste.tranform(l));
    }

    public void Exercice2_Question1_2()
    {
        //Question 1
        Predicate<Integer> taillePetite = x -> x < 100;
        Predicate<Integer> tailleGrande = x -> x > 200;
        Predicate<Integer> tailleIncorrecte = taillePetite.or(tailleGrande);
        Predicate<Integer> tailleCorrecte = tailleIncorrecte.negate();
        Predicate<Double> poidsLourd = x -> x > 150.0;
        Predicate<Double> poidsCorrect = poidsLourd.negate();
        Predicate<Paire<Integer, Double>> accesAutorise = p -> tailleCorrecte.test(p.fst) && poidsCorrect.test(p.snd);

        //Question 2
        Predicate<Paire<Integer, Double>> taillePetite2 = x -> x.fst < 100;
        Predicate<Paire<Integer, Double>> tailleGrande2 = x -> x.fst > 200;
        Predicate<Paire<Integer, Double>> tailleIncorrecte2 = taillePetite2.or(tailleGrande2);
        Predicate<Paire<Integer, Double>> tailleCorrecte2 = tailleIncorrecte2.negate();
        Predicate<Paire<Integer, Double>> poidsLourd2 = x -> x.snd > 150.0;
        Predicate<Paire<Integer, Double>> poidsCorrect2 = poidsLourd2.negate();


        List<Paire<Integer, Double>> liste = List.of(new Paire<Integer, Double>(100, 150.0), new Paire<Integer, Double>(150, 60.0), new Paire<Integer, Double>(150, 170.0), new Paire<Integer, Double>(210, 90.0));
        List<Predicate<Paire<Integer, Double>>> listePredicats = List.of(tailleCorrecte2, poidsCorrect2);
        filtragePredicatif(listePredicats, liste);
    }

    public <T> List<T> filtragePredicatif(List<Predicate<T>> conditions, List<T> elements){
        List<T> rtn = new ArrayList<>();
        //On récupère les prédicats
        Predicate<T> predicat = x -> true;

        for(Predicate<T> p : conditions)
        {
            predicat = predicat.and(p);
        }

        //Pour chaque élément en on vérifie qu'il respecte bien le prédicat
        for(T e : elements) {
            if (predicat.test(e))
            {
                rtn.add(e);
            }
        }
        return rtn;
    }

    public void Exercice3()
    {
        Matiere m1 = new Matiere("MAT1");
        Matiere m2 = new Matiere("MAT2");
        UE ue1 = new UE("UE1", Map.of(m1, 2, m2, 2));
        Matiere m3 = new Matiere("MAT3");
        UE ue2 = new UE("UE2", Map.of(m3, 1));
        Annee a1 = new Annee(Set.of(ue1, ue2));
        Etudiant e1 = new Etudiant("39001", "Alice", "Merveille", a1);
        e1.noter(m1, 12.0);
        e1.noter(m2, 14.0);
        e1.noter(m3, 10.0);
        System.out.println(e1);
        Etudiant e2 = new Etudiant("39002", "Bob", "Eponge", a1);
        e2.noter(m1, 14.0);
        e2.noter(m3, 14.0);
        Etudiant e3 = new Etudiant("39003", "Charles", "Chaplin", a1);
        e3.noter(m1, 18.0);
        e3.noter(m2, 5.0);
        e3.noter(m3, 14.0);
    }

    public void afficheSi(String entete, Predicate<Etudiant> pred, Annee annee){
        for(Etudiant e : annee.etudiants())
        {
            if(pred.test(e))
            {
                System.out.println(e);
            }
        }
    }

    public String getGreeting() {
        return "Hello World!";
    }


    public static void main(String[] args) {
        System.out.println(new App().getGreeting());
    }
}
